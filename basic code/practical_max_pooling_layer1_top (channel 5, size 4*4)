`timescale 1ns / 1ps

module max_pooling_layer1_top #(
    parameter IMAGE_WIDTH = 4,
    parameter IMAGE_HEIGHT = 4,
    parameter CHANNELS = 5,
    parameter POOL_WIDTH = 2,
    parameter POOL_HEIGHT = 2,
    parameter DATA_WIDTH = 32,
    parameter NUM_DATA = IMAGE_WIDTH * IMAGE_HEIGHT
)(
    input logic clk,
    input logic rst_n,
    input logic valid_in,
    input logic [DATA_WIDTH-1:0] data_in [0:CHANNELS*NUM_DATA-1],
    output logic valid_out,
    output logic [DATA_WIDTH-1:0] data_out [0:(IMAGE_HEIGHT/POOL_HEIGHT)*(IMAGE_WIDTH/POOL_WIDTH)*CHANNELS-1]
);

    logic [DATA_WIDTH-1:0] channel_data_out [0:(IMAGE_HEIGHT/POOL_HEIGHT)*(IMAGE_WIDTH/POOL_WIDTH)*CHANNELS-1];
    logic [CHANNELS-1:0] valid_out_channel;

    genvar i;
    generate
        for (i = 0; i < CHANNELS; i = i + 1) begin: pooling_instance
            max_pooling_layer1 #(
                .IMAGE_WIDTH(IMAGE_WIDTH),
                .IMAGE_HEIGHT(IMAGE_HEIGHT),
                .CHANNELS(1),
                .POOL_WIDTH(POOL_WIDTH),
                .POOL_HEIGHT(POOL_HEIGHT),
                .DATA_WIDTH(DATA_WIDTH),
                .NUM_DATA(NUM_DATA)
            ) u_max_pooling (
                .clk(clk),
                .rst_n(rst_n),
                .valid_in(valid_in),
                .data_in(data_in[i*NUM_DATA +: NUM_DATA]),
                .valid_out(valid_out_channel[i]),
                .data_out(channel_data_out[i*(IMAGE_HEIGHT/POOL_HEIGHT)*(IMAGE_WIDTH/POOL_WIDTH) +: (IMAGE_HEIGHT/POOL_HEIGHT)*(IMAGE_WIDTH/POOL_WIDTH)])
            );
        end
    endgenerate

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_out <= 0;
            for (int i = 0; i < (IMAGE_HEIGHT/POOL_HEIGHT)*(IMAGE_WIDTH/POOL_WIDTH)*CHANNELS; i = i + 1) begin
                data_out[i] <= '0;
            end
        end else begin
            valid_out <= &valid_out_channel;
            if (valid_out) begin
                for (int i = 0; i < (IMAGE_HEIGHT/POOL_HEIGHT)*(IMAGE_WIDTH/POOL_WIDTH)*CHANNELS; i = i + 1) begin
                    data_out[i] <= channel_data_out[i];
                end
            end
        end
    end

endmodule
