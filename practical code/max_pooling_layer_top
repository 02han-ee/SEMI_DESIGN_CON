`timescale 1ns / 1ps

module max_pooling_layer_top (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [31:0] data_in_1 [0:1][0:1],
    input wire [31:0] data_in_2 [0:1][0:1],
    input wire [31:0] data_in_3 [0:1][0:1],
    input wire [31:0] data_in_4 [0:1][0:1],
    input wire [31:0] data_in_5 [0:1][0:1],
    input wire [31:0] data_in_6 [0:1][0:1],
    input wire [31:0] data_in_7 [0:1][0:1],
    input wire [31:0] data_in_8 [0:1][0:1],
    input wire [31:0] data_in_9 [0:1][0:1],
    input wire [31:0] data_in_10 [0:1][0:1],
    input wire [31:0] data_in_11 [0:1][0:1],
    input wire [31:0] data_in_12 [0:1][0:1],
    input wire [31:0] data_in_13 [0:1][0:1],
    input wire [31:0] data_in_14 [0:1][0:1],
    input wire [31:0] data_in_15 [0:1][0:1],
    input wire [31:0] data_in_16 [0:1][0:1],
    input wire [31:0] data_in_17 [0:1][0:1],
    input wire [31:0] data_in_18 [0:1][0:1],
    input wire [31:0] data_in_19 [0:1][0:1],
    input wire [31:0] data_in_20 [0:1][0:1],
    input wire [31:0] data_in_21 [0:1][0:1],
    input wire [31:0] data_in_22 [0:1][0:1],
    input wire [31:0] data_in_23 [0:1][0:1],
    input wire [31:0] data_in_24 [0:1][0:1],
    input wire [31:0] data_in_25 [0:1][0:1],
    input wire [31:0] data_in_26 [0:1][0:1],
    input wire [31:0] data_in_27 [0:1][0:1],
    input wire [31:0] data_in_28 [0:1][0:1],
    input wire [31:0] data_in_29 [0:1][0:1],
    input wire [31:0] data_in_30 [0:1][0:1],
    input wire [31:0] data_in_31 [0:1][0:1],
    input wire [31:0] data_in_32 [0:1][0:1],
    output reg [31:0] data_out_1,
    output reg [31:0] data_out_2,
    output reg [31:0] data_out_3,
    output reg [31:0] data_out_4,
    output reg [31:0] data_out_5,
    output reg [31:0] data_out_6,
    output reg [31:0] data_out_7,
    output reg [31:0] data_out_8,
    output reg [31:0] data_out_9,
    output reg [31:0] data_out_10,
    output reg [31:0] data_out_11,
    output reg [31:0] data_out_12,
    output reg [31:0] data_out_13,
    output reg [31:0] data_out_14,
    output reg [31:0] data_out_15,
    output reg [31:0] data_out_16,
    output reg [31:0] data_out_17,
    output reg [31:0] data_out_18,
    output reg [31:0] data_out_19,
    output reg [31:0] data_out_20,
    output reg [31:0] data_out_21,
    output reg [31:0] data_out_22,
    output reg [31:0] data_out_23,
    output reg [31:0] data_out_24,
    output reg [31:0] data_out_25,
    output reg [31:0] data_out_26,
    output reg [31:0] data_out_27,
    output reg [31:0] data_out_28,
    output reg [31:0] data_out_29,
    output reg [31:0] data_out_30,
    output reg [31:0] data_out_31,
    output reg [31:0] data_out_32,
    output reg valid_out
);

    // data_in_i 배열 선언
    reg [31:0] data_in_i [0:1][0:1];
    
    // 데이터 출력 배열
    reg [31:0] data_out_i;
    
    reg [31:0] max_out [0:31]; // 각 max_pooling 모듈의 출력 저장

    // 32개의 max_pooling 모듈 인스턴스화
    generate
        genvar i;
        for (i = 1; i <= 32; i = i + 1) begin : gen_max_pooling
            max_pooling u_max_pooling (
                .clk(clk),
                .rst_n(rst_n),
                .data_in0(data_in_i[0][0]),
                .data_in1(data_in_i[0][1]),
                .data_in2(data_in_i[1][0]),
                .data_in3(data_in_i[1][1]),
                .data_out(max_out[i-1])
            );
        end
    endgenerate
    
//    always_comb begin
//        // 데이터 입력 블록 설정
//        data_in_i[0][0] = data_in_1[0][0];
//        data_in_i[0][1] = data_in_1[0][1];
//        data_in_i[1][0] = data_in_1[1][0];
//        data_in_i[1][1] = data_in_1[1][1];
//    end

    // 유효 신호 처리 및 데이터 출력
    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out_1 <= 32'b0;
            data_out_2 <= 32'b0;
            data_out_3 <= 32'b0;
            data_out_4 <= 32'b0;
            data_out_5 <= 32'b0;
            data_out_6 <= 32'b0;
            data_out_7 <= 32'b0;
            data_out_8 <= 32'b0;
            data_out_9 <= 32'b0;
            data_out_10 <= 32'b0;
            data_out_11 <= 32'b0;
            data_out_12 <= 32'b0;
            data_out_13 <= 32'b0;
            data_out_14 <= 32'b0;
            data_out_15 <= 32'b0;
            data_out_16 <= 32'b0;
            data_out_17 <= 32'b0;
            data_out_18 <= 32'b0;
            data_out_19 <= 32'b0;
            data_out_20 <= 32'b0;
            data_out_21 <= 32'b0;
            data_out_22 <= 32'b0;
            data_out_23 <= 32'b0;
            data_out_24 <= 32'b0;
            data_out_25 <= 32'b0;
            data_out_26 <= 32'b0;
            data_out_27 <= 32'b0;
            data_out_28 <= 32'b0;
            data_out_29 <= 32'b0;
            data_out_30 <= 32'b0;
            data_out_31 <= 32'b0;
            data_out_32 <= 32'b0;
            valid_out <= 1'b0;
        end else if (valid_in) begin
            data_out_1 <= max_out[0];
            data_out_2 <= max_out[1];
            data_out_3 <= max_out[2];
            data_out_4 <= max_out[3];
            data_out_5 <= max_out[4];
            data_out_6 <= max_out[5];
            data_out_7 <= max_out[6];
            data_out_8 <= max_out[7];
            data_out_9 <= max_out[8];
            data_out_10 <= max_out[9];
            data_out_11 <= max_out[10];
            data_out_12 <= max_out[11];
            data_out_13 <= max_out[12];
            data_out_14 <= max_out[13];
            data_out_15 <= max_out[14];
            data_out_16 <= max_out[15];
            data_out_17 <= max_out[16];
            data_out_18 <= max_out[17];
            data_out_19 <= max_out[18];
            data_out_20 <= max_out[19];
            data_out_21 <= max_out[20];
            data_out_22 <= max_out[21];
            data_out_23 <= max_out[22];
            data_out_24 <= max_out[23];
            data_out_25 <= max_out[24];
            data_out_26 <= max_out[25];
            data_out_27 <= max_out[26];
            data_out_28 <= max_out[27];
            data_out_29 <= max_out[28];
            data_out_30 <= max_out[29];
            data_out_31 <= max_out[30];
            data_out_32 <= max_out[31];
            valid_out <= 1'b1;
        end
    end
endmodule
