`timescale 1ns / 1ps

module relu_activation_array #(
    parameter int IMAGE_WIDTH = 3,               // 이미지 너비
    parameter int IMAGE_HEIGHT = 4,              // 이미지 높이
    parameter int CHANNELS = 5,                  // 채널 수
    parameter int DATA_WIDTH = 32                 // 데이터 폭 (32비트 부동소수점)
)(
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [DATA_WIDTH-1:0] data_in [0:CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT-1],  // 입력 데이터 배열
    output reg [DATA_WIDTH-1:0] data_out [0:CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT-1], // 출력 데이터 배열
    output reg valid_out
);

    // 내부 인덱스 변수
    integer i;

    // ReLU 활성화 함수 적용
    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            for (i = 0; i < CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT; i = i + 1) begin
                data_out[i] <= 32'b0; // 리셋 시 모든 출력 값을 0으로 설정
            end
            valid_out <= 1'b0;
        end
        else if (valid_in) begin
            for (i = 0; i < CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT; i = i + 1) begin
                if (data_in[i][DATA_WIDTH-1] == 1'b0) // MSB가 0이면 양수 또는 0
                    data_out[i] <= data_in[i];
                else
                    data_out[i] <= 32'b0; // 음수일 경우 0으로 설정
            end
            valid_out <= 1'b1; // 유효한 출력 표시
        end
        else begin
            valid_out <= 1'b0; // 유효한 입력이 없을 경우 valid_out을 0으로 설정
        end
    end
endmodule
