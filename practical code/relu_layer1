`timescale 1ns / 1ps

module relu #(parameter
    IMAGE_WIDTH = 26,
    IMAGE_HEIGHT = 34,
    CHANNELS = 32,
    DATA_BITS = 32
)(
    input clk,
    input rst_n,
    input valid_in,
    input [DATA_BITS-1:0] data_in [0:CHANNELS-1],
    output reg valid_out,
    output reg [DATA_BITS-1:0] data_out [0:CHANNELS-1]
);

    reg valid_out_delay;
    reg [IMAGE_WIDTH*IMAGE_HEIGHT-1:0] pixel_counter;
    
    integer i;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_out <= 0;
            valid_out_delay <= 0;
            pixel_counter <= 0;
        end else begin
            if (valid_in) begin
                // ReLU operation
                for (i = 0; i < CHANNELS; i = i + 1) begin
                    if ($signed(data_in[i]) > 0) begin
                        data_out[i] <= data_in[i];
                    end else begin
                        data_out[i] <= 32'b0;
                    end
                end
                
                if (pixel_counter < IMAGE_WIDTH * IMAGE_HEIGHT) begin
                    valid_out <= 1;
                    valid_out_delay <= 1;
                    pixel_counter <= pixel_counter + 1;
                end else begin
                    valid_out <= 0;
                    pixel_counter <= 0;
                end
            end else if (valid_out_delay) begin
                valid_out <= 0;  // Deactivate valid_out after 1 clock cycle
                valid_out_delay <= 0;
            end else begin
                valid_out <= 0;  // Maintain valid_out as low
            end
        end
    end

endmodule
