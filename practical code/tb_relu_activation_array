`timescale 1ns / 1ps

module tb_relu_activation_array;

    // 파라미터 설정
    parameter int IMAGE_WIDTH = 3;
    parameter int IMAGE_HEIGHT = 4;
    parameter int CHANNELS = 5;
    parameter int DATA_WIDTH = 32;
    parameter int TOTAL_ELEMENTS = CHANNELS * IMAGE_WIDTH * IMAGE_HEIGHT;

    // 클럭 및 리셋 신호
    logic clk;
    logic rst_n;
    logic valid_in;
    logic [DATA_WIDTH-1:0] data_in [0:TOTAL_ELEMENTS-1];
    logic [DATA_WIDTH-1:0] data_out [0:TOTAL_ELEMENTS-1];
    logic valid_out;

    // ReLU 모듈 인스턴스화
    relu_activation_array #(
        .IMAGE_WIDTH(IMAGE_WIDTH),
        .IMAGE_HEIGHT(IMAGE_HEIGHT),
        .CHANNELS(CHANNELS),
        .DATA_WIDTH(DATA_WIDTH)
    ) uut (
        .clk(clk),
        .rst_n(rst_n),
        .valid_in(valid_in),
        .data_in(data_in),
        .data_out(data_out),
        .valid_out(valid_out)
    );

    // 클럭 생성
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns 주기 클럭 생성
    end

    // 테스트 케이스
    initial begin
        // 초기화
        rst_n = 0;
        valid_in = 0;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            data_in[i] = 32'b0;
        end

        // 리셋 해제
        #10;
        rst_n = 1;

        // 첫 번째 테스트 케이스: 모든 입력이 양수
        #10;
        valid_in = 1;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            data_in[i] = 32'h3F800000; // 1.0
        end
        #10;
        valid_in = 0;

        // 출력 확인
        #10;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            if (data_out[i] !== 32'h3F800000) $display("Test Case 1 Failed at index %0d", i);
        end

        // 두 번째 테스트 케이스: 모든 입력이 음수
        #10;
        valid_in = 1;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            data_in[i] = 32'hBF800000; // -1.0
        end
        #10;
        valid_in = 0;

        // 출력 확인
        #10;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            if (data_out[i] !== 32'h00000000) $display("Test Case 2 Failed at index %0d", i);
        end

        // 세 번째 테스트 케이스: 입력이 혼합됨
        #10;
        valid_in = 1;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            case (i % 8)
                0: data_in[i] = 32'h3F800000; // 1.0
                1: data_in[i] = 32'hBF800000; // -1.0
                2: data_in[i] = 32'h40000000; // 2.0
                3: data_in[i] = 32'hC0000000; // -2.0
                4: data_in[i] = 32'h3F000000; // 0.5
                5: data_in[i] = 32'hBF000000; // -0.5
                6: data_in[i] = 32'h3F400000; // 0.75
                7: data_in[i] = 32'hBF400000; // -0.75
            endcase
        end
        #10;
        valid_in = 0;

        // 출력 확인
        #10;
        for (int i = 0; i < TOTAL_ELEMENTS; i++) begin
            if (i % 8 == 0 || i % 8 == 2 || i % 8 == 4 || i % 8 == 6) begin
                if (data_out[i] !== data_in[i]) $display("Test Case 3 Failed at index %0d", i);
            end else begin
                if (data_out[i] !== 32'h00000000) $display("Test Case 3 Failed at index %0d", i);
            end
        end

        // 시뮬레이션 종료
        #10;
        $finish;
    end

endmodule
