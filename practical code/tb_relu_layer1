`timescale 1ns / 1ps

`timescale 1ns / 1ps

module tb_relu();

    parameter IMAGE_WIDTH = 26;
    parameter IMAGE_HEIGHT = 34;
    parameter CHANNELS = 32;
    parameter DATA_BITS = 32;

    reg clk;
    reg rst_n;
    reg valid_in;
    reg [DATA_BITS-1:0] data_in [0:CHANNELS-1];
    wire valid_out;
    wire [DATA_BITS-1:0] data_out [0:CHANNELS-1];

    // Instantiate the ReLU module
    relu #(
        .IMAGE_WIDTH(IMAGE_WIDTH),
        .IMAGE_HEIGHT(IMAGE_HEIGHT),
        .CHANNELS(CHANNELS),
        .DATA_BITS(DATA_BITS)
    ) uut (
        .clk(clk),
        .rst_n(rst_n),
        .valid_in(valid_in),
        .data_in(data_in),
        .valid_out(valid_out),
        .data_out(data_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10ns clock period
    end

    // Testbench logic
    initial begin
        // Initialize signals
        rst_n = 0;
        valid_in = 0;

        // Apply reset
        #10;
        rst_n = 1;
        #10;

        // Test case 1: Input a mix of positive and negative numbers
        // Positive numbers: 32'h3F800000 (1.0), 32'h40000000 (2.0)
        // Negative numbers: 32'hBF800000 (-1.0), 32'hC0000000 (-2.0)
        valid_in = 1;
        data_in[0] = 32'h3F800000;  // 1.0
        data_in[1] = 32'hBF800000;  // -1.0
        data_in[2] = 32'h40000000;  // 2.0
        data_in[3] = 32'hC0000000;  // -2.0
        #10;  // Wait for the data to propagate

        valid_in = 0;
        #10;  // Wait to observe valid_out behavior

        // Test case 2: Input all negative numbers (output should be all zero)
        valid_in = 1;
        data_in[0] = 32'hBF800000;  // -1.0
        data_in[1] = 32'hBF800000;  // -1.0
        data_in[2] = 32'hC0000000;  // -2.0
        data_in[3] = 32'hC0000000;  // -2.0
        #10;

        valid_in = 0;
        #10;

        // Test case 3: Input all positive numbers
        valid_in = 1;
        data_in[0] = 32'h3F800000;  // 1.0
        data_in[1] = 32'h40000000;  // 2.0
        data_in[2] = 32'h40400000;  // 3.0
        data_in[3] = 32'h40800000;  // 4.0
        #10;

        valid_in = 0;
        #10;

        // End simulation
        $finish;
    end

    // Monitor output data
    initial begin
        $monitor("Time: %0t | valid_in: %b | data_in: %h %h %h %h | valid_out: %b | data_out: %h %h %h %h",
                 $time, valid_in, data_in[0], data_in[1], data_in[2], data_in[3], 
                 valid_out, data_out[0], data_out[1], data_out[2], data_out[3]);
    end

endmodule
